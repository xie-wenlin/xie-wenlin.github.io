<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>内存管理 - 标签 - book</title>
        <link>https://xie-wenlin.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
        <description>内存管理 - 标签 - book</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>wenlin.xie01@gmail.com (2019lin)</managingEditor>
            <webMaster>wenlin.xie01@gmail.com (2019lin)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 10 Dec 2022 16:11:55 &#43;0800</lastBuildDate><atom:link href="https://xie-wenlin.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/" rel="self" type="application/rss+xml" /><item>
    <title>内存管理</title>
    <link>https://xie-wenlin.github.io/posts/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
    <pubDate>Sat, 10 Dec 2022 16:11:55 &#43;0800</pubDate>
    <author>2019lin</author>
    <guid>https://xie-wenlin.github.io/posts/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[内存管理 在 go 语言中，内存管理是由 go 的运行时系统（runtime）自动完成的。程序员不需要手动分配或释放内存，也不需要担心内存泄漏问题。
go 的运行时系统使用了一种叫做垃圾回收（garbage collection）的技术来自动管理内存。它会监控内存使用情况，当某个对象不再被使用时，它会自动将其回收。这样，程序员就可以专注于编写业务逻辑，而不用担心内存管理问题。
不过，go 语言的垃圾回收并不是完美的。垃圾回收会产生性能开销，在高性能要求的场景下，垃圾回收可能会成为瓶颈。此外，垃圾回收也无法解决一些内存泄漏问题，例如循环引用。
Go 语言的内存管理模型涉及到两个重要的概念：堆和栈。堆是一个由程序员分配的内存区域，用于存储动态分配的变量，例如通过 new 关键字或者 make 函数创建的变量。栈是系统自动分配的内存区域，用于存储函数调用时的局部变量和函数参数。]]></description>
</item>
</channel>
</rss>
