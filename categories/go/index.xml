<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>go - 分类 - book</title>
        <link>https://xie-wenlin.github.io/categories/go/</link>
        <description>go - 分类 - book</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>wenlin.xie01@gmail.com (2019lin)</managingEditor>
            <webMaster>wenlin.xie01@gmail.com (2019lin)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 12 Dec 2022 21:34:08 &#43;0800</lastBuildDate><atom:link href="https://xie-wenlin.github.io/categories/go/" rel="self" type="application/rss+xml" /><item>
    <title>B&#43;树</title>
    <link>https://xie-wenlin.github.io/posts/b&#43;%E6%A0%91/</link>
    <pubDate>Mon, 12 Dec 2022 21:34:08 &#43;0800</pubDate>
    <author>2019lin</author>
    <guid>https://xie-wenlin.github.io/posts/b&#43;%E6%A0%91/</guid>
    <description><![CDATA[B+树 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // Node represents a node in a binary search tree. type Node struct { // Key is the value stored in the node. Key int // Left and right are the left and right children of the node.]]></description>
</item>
<item>
    <title>二叉搜索树</title>
    <link>https://xie-wenlin.github.io/posts/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
    <pubDate>Mon, 12 Dec 2022 20:54:39 &#43;0800</pubDate>
    <author>2019lin</author>
    <guid>https://xie-wenlin.github.io/posts/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
    <description><![CDATA[二叉搜索树 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 // Node represents a node in a binary search tree. type Node struct { // Key is the value stored in the node. Key int // Left and right are the left and right children of the node.]]></description>
</item>
<item>
    <title>数据库</title>
    <link>https://xie-wenlin.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <pubDate>Mon, 12 Dec 2022 20:36:10 &#43;0800</pubDate>
    <author>2019lin</author>
    <guid>https://xie-wenlin.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
    <description><![CDATA[数据库 ]]></description>
</item>
<item>
    <title>go的并发</title>
    <link>https://xie-wenlin.github.io/posts/go%E7%9A%84%E5%B9%B6%E5%8F%91/</link>
    <pubDate>Sat, 10 Dec 2022 16:11:55 &#43;0800</pubDate>
    <author>2019lin</author>
    <guid>https://xie-wenlin.github.io/posts/go%E7%9A%84%E5%B9%B6%E5%8F%91/</guid>
    <description><![CDATA[go的并发 在 Go 中，您可以使用 goroutine 来编写并发代码。goroutine 是一种轻量级的线程，它允许您在单个进程中执行多个任务。您可以通过在函数名之前添加 go 关键字来创建一个 goroutine。下面是一个简单的例子：
1 2 3 4 5 6 7 package main import &#34;fmt&#34; func main() { go fmt.Println(&#34;Hello, world!&#34;) } 在这个例子中，我们创建了一个 goroutine 来打印 &ldquo;Hello, world!&quot;。这个 goroutine 会在 main 函数返回之前执行，因此您可以使用 goroutine 来执行需要长时间运行的任务。
如果你想写一个优美的 Go 并发程序，你需要遵循一些基本的原则。首先，在 Go 中使用通信来共享内存，而不是通过共享内存来通信。这意味着，在 Go 程序中，你应该尽量使用通道（channels）来在 goroutines 之间传递数据。
其次，你应该尽量避免使用全局变量，因为它们会使程序的并发性变得更加困难。相反，你应该通过函数参数和返回值来传递数据。
此外，你应该注意避免竞争条件（race condition），这是指在多个 goroutines 之间发生的不确定的状态更改。这可以通过 Go 语言提供的 sync 包中的互斥锁（mutex）来解决。你还需要掌握 Go 语言中的并发模型。Go 语言提供了一种简单而有效的并发模型，通过 goroutine 和 channel 来实现。使用 goroutine 可以创建并行的任务，通过 channel 可以在多个 goroutine 之间传递消息。]]></description>
</item>
<item>
    <title>懒汉模式</title>
    <link>https://xie-wenlin.github.io/posts/%E6%87%92%E6%B1%89%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sat, 10 Dec 2022 16:11:55 &#43;0800</pubDate>
    <author>2019lin</author>
    <guid>https://xie-wenlin.github.io/posts/%E6%87%92%E6%B1%89%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[go懒汉模式 &ldquo;懒汉模式&rdquo;（lazy instantiation）是指在第一次使用时才会创建对象的方法。这与饿汉模式（eager instantiation）不同，饿汉模式会在程序启动时就创建对象。
Go 语言中的懒汉模式指的是在需要的时候才创建对象的方式。这种方式的好处是可以节省内存，因为对象只有在真正需要的时候才会被创建。不过，使用懒汉模式时需要注意线程安全问题。Go语言没有直接支持懒汉模式的语法，但是你可以通过编写一个函数来实现这个模式。例如：
1 2 3 4 5 6 7 8 var instance *Singleton func GetInstance() *Singleton { if instance == nil { instance = &amp;Singleton{} } return instance } 在这个函数中，我们首先检查实例是否为空，如果是，我们创建一个新的实例并将其保存到变量中。如果实例已经存在，我们直接返回它。
需要注意的是，由于Go语言没有类型，所以我们需要使用一个全局变量来保存实例。这可能会导致一些问题，例如多个单例实例之间的冲突，因此在实际开发中应该谨慎使用。
在 go 语言中，可以使用 sync.Once 类型来实现懒汉模式,解决多个单例之间的冲突。例如：
1 2 3 4 5 6 7 8 9 10 11 import &#34;sync&#34; var once sync.Once var instance *MyType func GetInstance() *MyType { once.Do(func() { instance = &amp;MyType{} }) return instance } 在上面的代码中，GetInstance 函数使用 sync.]]></description>
</item>
<item>
    <title>内存管理</title>
    <link>https://xie-wenlin.github.io/posts/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
    <pubDate>Sat, 10 Dec 2022 16:11:55 &#43;0800</pubDate>
    <author>2019lin</author>
    <guid>https://xie-wenlin.github.io/posts/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[内存管理 在 go 语言中，内存管理是由 go 的运行时系统（runtime）自动完成的。程序员不需要手动分配或释放内存，也不需要担心内存泄漏问题。
go 的运行时系统使用了一种叫做垃圾回收（garbage collection）的技术来自动管理内存。它会监控内存使用情况，当某个对象不再被使用时，它会自动将其回收。这样，程序员就可以专注于编写业务逻辑，而不用担心内存管理问题。
不过，go 语言的垃圾回收并不是完美的。垃圾回收会产生性能开销，在高性能要求的场景下，垃圾回收可能会成为瓶颈。此外，垃圾回收也无法解决一些内存泄漏问题，例如循环引用。
Go 语言的内存管理模型涉及到两个重要的概念：堆和栈。堆是一个由程序员分配的内存区域，用于存储动态分配的变量，例如通过 new 关键字或者 make 函数创建的变量。栈是系统自动分配的内存区域，用于存储函数调用时的局部变量和函数参数。]]></description>
</item>
</channel>
</rss>
